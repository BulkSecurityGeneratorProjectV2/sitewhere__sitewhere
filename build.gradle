plugins {
    id 'org.springframework.boot' version '2.4.5' apply false
    id 'org.springframework.experimental.aot' version '0.9.2' apply false
    id 'com.bmuschko.docker-remote-api' version '5.3.0'
    id 'org.ajoberstar.grgit' version '2.2.1'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.moowork.node' version '1.3.1'
    id 'java'
    id 'checkstyle'
    id 'distribution'
}

ext {
    git = org.ajoberstar.grgit.Grgit.open(currentDir: file('.'))
}

ext['git.revision'] = ext.git.head().id
ext['git.revision.abbrev'] = ext.git.head().abbreviatedId

ext['sitewhere.microservice.api.version'] = '3.1.0'
ext['sitewhere.integration.api.version'] = '3.1.0'
ext['kafka.version'] = '2.0.0'
ext['protobuf.version'] = '3.5.1'
ext['grpc.version'] = '1.25.0'

allprojects {
    group = 'com.sitewhere'
	version = '3.1.0'

    repositories {
		mavenLocal()
        mavenCentral()
        maven { url 'https://repo.spring.io/release' }
        maven { url 'http://maven.restlet.org' }
        maven { url "https://jitpack.io" }
        maven { url "http://oss.jfrog.org/artifactory/oss-release-local/" }
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'org.springframework.experimental.aot'
    
	license {
		header rootProject.file('HEADER')
    	include "**/*.java"
	}

	// Allow Docker settings to be overridden by build environment.
	if (System.getenv("DOCKER_REGISTRY_URL") != null) registryUrl = System.getenv("DOCKER_REGISTRY_URL")
	if (System.getenv("DOCKER_REGISTRY_USERNAME") != null) registryUsername = System.getenv("DOCKER_REGISTRY_USERNAME")
	if (System.getenv("DOCKER_REGISTRY_PASSWORD") != null) registryPassword = System.getenv("DOCKER_REGISTRY_PASSWORD")
	if (System.getenv("DOCKER_REGISTRY_EMAIL") != null) registryEmail = System.getenv("DOCKER_REGISTRY_EMAIL")

	// Apply Docker plugin.
	apply plugin: 'com.bmuschko.docker-remote-api'
	docker {
	    registryCredentials {
	        url = registryUrl
	        username = registryUsername
	        password = registryPassword
	        email = registryEmail
	    }
	}

 	// Choose Java settings.
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

	// Replace tokens with version info.
	processResources {
	    from(sourceSets.main.resources.srcDirs) {
	        include '**/*.properties'
	        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
	            'build.timestamp': new java.text.SimpleDateFormat('yyyyMMddHHmmss').format(new Date()),
	            'version.identifier' : project.version,
	            'git.revision': rootProject.ext['git.revision'],
	            'git.revision.abbrev': rootProject.ext['git.revision.abbrev']
	        ])
	    }
	}
	
	// Create Dockerfile for microservices.
	task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootJar ) {
    	destFile = project.file('build/docker/Dockerfile')
    	from "ghcr.io/graalvm/graalvm-ce:ol8-java8-20.3.1"
		copyFile("${project.name}-${project.version}.jar", "/")
			
		if(!project.hasProperty("debug")) {
			defaultCommand('java', 
				'-server', 
				'-Xmx512M', 
				'-Xss384K', 
				'-jar', 
				"${project.name}-${project.version}.jar")
		} else {
	    	exposePort 1100
	    	exposePort 8000
	    	defaultCommand('java',
		    	'-server',
		    	'-Xdebug',
		    	'-Dcom.sun.management.jmxremote.local.only=false',
		    	'-Dcom.sun.management.jmxremote.ssl=false',
		    	'-Dcom.sun.management.jmxremote.authenticate=false',
		    	'-Dcom.sun.management.jmxremote.port=1100',
		    	'-Dcom.sun.management.jmxremote.rmi.port=1100',
		    	'-Dcom.sun.management.jmxremote.host=0.0.0.0',
		    	'-Djava.rmi.server.hostname=0.0.0.0',
		    	'-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000',
		    	'-Xmx512M',
		    	'-Xss384K',
		    	'-jar',
		    	"${project.name}-${project.version}.jar")	
		}
	}
	
	// Copy Spring Boot lib to docker folder.
	task copyBootLibToDocker(type: Copy, dependsOn: dockerFile) {
		into('build/docker')
	    from "${buildDir}/libs/${project.name}-${project.version}.jar"
	}
	
	// Build an image from the Dockerfile.
	task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyBootLibToDocker) {
	    inputDir = project.file('build/docker')
		if(!project.hasProperty("debug")) {
		    tags = ["${dockerRepository}/sitewhere/${project.name}:${version}"]
		} else {
		    tags = ["${dockerRepository}/sitewhere/${project.name}:debug-${version}"]		
		}
	}

    // Common dependencies used for all projects.
    dependencies {
        // Sping dependency managment.
        implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        
        // Expected for microservice library.
        compileOnly group: 'org.graalvm.nativeimage', name: 'svm', version: '21.0.0.2'

    	// Testing dependencies.
		testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}
